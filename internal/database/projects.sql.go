// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package database

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (id, name, path, description, created_by)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, path, description, created_by, created_at, updated_at, delete_at
`

type CreateProjectParams struct {
	ID          interface{}
	Name        string
	Path        string
	Description sql.NullString
	CreatedBy   interface{}
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.ID,
		arg.Name,
		arg.Path,
		arg.Description,
		arg.CreatedBy,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, name, path, description, created_by, created_at, updated_at, delete_at 
FROM projects 
WHERE id = ?
`

func (q *Queries) GetProject(ctx context.Context, id interface{}) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const getProjectByPath = `-- name: GetProjectByPath :one
SELECT id, name, path, description, created_by, created_at, updated_at, delete_at 
FROM projects 
WHERE path = ?
`

func (q *Queries) GetProjectByPath(ctx context.Context, path string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByPath, path)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, name, path, description, created_by, created_at, updated_at, delete_at 
FROM projects
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeleteAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

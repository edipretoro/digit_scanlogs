// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: files.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (id, project_id, user_id, name, path, size, mode, modtime, sha512, description)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, project_id, user_id, name, path, size, mode, modtime, sha512, description, created_at, updated_at, deleted_at
`

type CreateFileParams struct {
	ID          interface{}
	ProjectID   interface{}
	UserID      interface{}
	Name        string
	Path        string
	Size        int64
	Mode        string
	Modtime     time.Time
	Sha512      string
	Description sql.NullString
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.ID,
		arg.ProjectID,
		arg.UserID,
		arg.Name,
		arg.Path,
		arg.Size,
		arg.Mode,
		arg.Modtime,
		arg.Sha512,
		arg.Description,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Path,
		&i.Size,
		&i.Mode,
		&i.Modtime,
		&i.Sha512,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFile = `-- name: GetFile :one
SELECT id, project_id, user_id, name, path, size, mode, modtime, sha512, description, created_at, updated_at, deleted_at FROM files WHERE id = ?
`

func (q *Queries) GetFile(ctx context.Context, id interface{}) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Path,
		&i.Size,
		&i.Mode,
		&i.Modtime,
		&i.Sha512,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFileByPath = `-- name: GetFileByPath :one
SELECT id, project_id, user_id, name, path, size, mode, modtime, sha512, description, created_at, updated_at, deleted_at FROM files WHERE path = ?
`

func (q *Queries) GetFileByPath(ctx context.Context, path string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByPath, path)
	var i File
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Path,
		&i.Size,
		&i.Mode,
		&i.Modtime,
		&i.Sha512,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFiles = `-- name: GetFiles :many
SELECT id, project_id, user_id, name, path, size, mode, modtime, sha512, description, created_at, updated_at, deleted_at FROM files
`

func (q *Queries) GetFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.UserID,
			&i.Name,
			&i.Path,
			&i.Size,
			&i.Mode,
			&i.Modtime,
			&i.Sha512,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

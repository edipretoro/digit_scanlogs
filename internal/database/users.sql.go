// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, uid, username, fullname)
VALUES (?, ?, ?, ?)
RETURNING id, uid, username, fullname, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	ID       interface{}
	Uid      int64
	Username string
	Fullname string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Uid,
		arg.Username,
		arg.Fullname,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.Fullname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUID = `-- name: GetUserByUID :one
SELECT id, uid, username, fullname, created_at, updated_at, deleted_at FROM users WHERE uid = ?
`

func (q *Queries) GetUserByUID(ctx context.Context, uid int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUID, uid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.Fullname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, uid, username, fullname, created_at, updated_at, deleted_at FROM users WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Username,
		&i.Fullname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, uid, username, fullname, created_at, updated_at, deleted_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Username,
			&i.Fullname,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
